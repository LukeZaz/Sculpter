{
	// Place your Vectoray workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"GL Interop Delegate": {
		"scope": "csharp",
		"prefix": "glinterop",
		"body": [
			"[UnmanagedFunctionPointer(CallingConvention.Cdecl)]",
			"private delegate ${1:void} gl${2:FuncName}($0);",
			"private readonly gl${2:FuncName} _gl${2:FuncName};"
		],
		"description": "Add a new OpenGL interop delegate."
	},
	"ExceptionEnum Definition": {
		"scope": "csharp",
		"prefix": "exc-enum",
		"body": [
			"/// <summary>",
			"/// A type used to represent the various errors that can occur for the ${1:TypeName} class.",
			"/// </summary>",
			"public class ${1:TypeName}Exception : ExceptionEnum<${1:TypeName}ExceptionType>",
			"{",
			"\tpublic ${1:TypeName}Exception(${1:TypeName}ExceptionType type) : base(type) {}",
			"\tpublic ${1:TypeName}Exception(${1:TypeName}ExceptionType type, string message) : base(type, message) {}",
			"\tpublic ${1:TypeName}Exception(${1:TypeName}ExceptionType type, string message, Exception inner) : base(type, message, inner) {}",
			"}\n",
			"/// <summary>",
			"/// An enum of the various types of errors that can occur for the ${1:TypeName} class.",
			"/// </summary>",
			"public enum ${1:TypeName}ExceptionType",
			"{",
			"\tDefault,",
			"\t$0",
			"}"
		],
		"description": "Create a new ExceptionEnum variant and an associated enum for it."
	},
	"ExceptionEnum Definition (No Docs)": {
		"scope": "csharp",
		"prefix": "exc-enum-nodoc",
		"body": [
			"public class ${1:TypeName}Exception : ExceptionEnum<${1:TypeName}ExceptionType>",
			"{",
			"\tpublic ${1:TypeName}Exception(${1:TypeName}ExceptionType type) : base(type) {}",
			"\tpublic ${1:TypeName}Exception(${1:TypeName}ExceptionType type, string message) : base(type, message) {}",
			"\tpublic ${1:TypeName}Exception(${1:TypeName}ExceptionType type, string message, Exception inner) : base(type, message, inner) {}",
			"}\n",
			"public enum ${1:TypeName}ExceptionType",
			"{",
			"\tDefault,",
			"\t$0",
			"}"
		],
		"description": "Create a new ExceptionEnum variant and an associated enum for it (minus summary blocks)."
	}
}